<?xml version="1.0" encoding="ISO-8859-1" ?>
<doc>
<title>TJS Tips and Usage Guidelines</title>

<para>
<ptitle>TJS2 and KAG</ptitle>
TJS (TJS2) is a scripting language that can directly control the game engine, similar to JavaScript and JAVA. KAG is written in this TJS script.<r/>
TJS script in KAG can be used to write from scenario-like descriptions (externally) to system-like descriptions (internally), making it both flexible and powerful.<r/>
<r/>
KAG has several areas where "TJS expressions" can be specified, such as the exp attribute in eval emb link if tags, the cond attribute in various tags, and entities (& prefixed tag content), etc.<r/>
Using TJS expressions allows relatively easy access to the game engine's functionality that is usually hidden behind KAG's features.<r/>
Also, the iscript tag allows direct execution of TJS2 script, enabling complex operations and extending KAG's functionality.<r/>
<r/>
For detailed information about TJS2 syntax, please refer to the TJS2 reference, and for game engine functionality, please refer to the game engine reference.<r/>
</para>

<para>
<ptitle>KAG's Object Structure</ptitle>
Since KAG itself is written in TJS2 script, you can (though care is needed) directly access KAG's internal structure.<r/>
While it's better to be careful when assigning values to variables of KAG's management objects, you can use KAG's internal variables for advanced scenario writing.<r/>
<r/>
<dl>
<dt><kw>KAGWindow Class</kw> Objects</dt>
<dd>
The KAGWindow class (described in MainWindow.tjs) is a class for managing KAG windows, and its object can be accessed through the global variable <tt><kw>kag</kw></tt>.<r/>
For example, to access the KAGWindow class's <tt>skipMode</tt> variable (which indicates the current skip mode), use <tt><kw>kag.skipMode</kw></tt>.
</dd>
<dt><kw>Background Layer</kw></dt>
<dd>
The background layer is a <kw>BaseLayer class</kw> object (described in GraphicLayer.tjs).<r/>
The foreground's background layer can be accessed via <tt><kw>kag.fore.base</kw></tt>, and the background's background layer via <tt><kw>kag.back.base</kw></tt>.
</dd>

<dt><kw>Foreground Layer</kw></dt>
<dd>
The foreground layer is a <kw>CharacterLayer class</kw> object (described in GraphicLayer.tjs).<r/>
The foreground's character layer can be accessed via <tt><kw>kag.fore.layers</kw>[n]</tt>, and the background's character layer via <tt><kw>kag.back.layers</kw>[n]</tt> (where n is the foreground layer number 0~).
</dd>
<dt><kw>Message Layer</kw></dt>
<dd>
The message layer is a <kw>MessageLayer class</kw> object (described in MessageLayer.tjs).<r/>
The foreground's message layer can be accessed via <tt><kw>kag.fore.messages</kw>[n]</tt>, and the background's message layer via <tt><kw>kag.back.messages</kw>[n]</tt> (where n is the message layer number 0~).<r/>
<tt><kw>kag.current</kw></tt> represents the currently targeted message layer.
</dd>
<dt><kw>Objects within Message Layer</kw></dt>
<dd>
To access graphical buttons, edit boxes, checkboxes, etc., created in the message layer, use the message layer's links property.<r/>
links is an array object that stores references to management objects for links, graphical buttons, edit boxes, checkboxes, etc., when they are created. For graphical buttons, edit boxes, and checkboxes, you can directly access their respective class objects through their object variable.<r/>
For example, if you write the following in the foreground message layer 0:<r/>
<bq>
@cm<r/>
@edit length=420 name="f.name"<r/>
</bq>
    To set focus to this edit box (make it ready for keyboard input), you can write:<r/>
<bq>
@eval exp="kag.fore.messages[0].links[0].object.focus()"<r/>
</bq>
This is useful when you want to process something after displaying an edit box and having the user input something.
</dd>
<dt><kw>Sound Effect Buffer</kw></dt>
<dd>
The sound effect buffer is a <kw>SESoundBuffer class</kw> object (described in SE.tjs).<r/>
It can be accessed via <tt><kw>kag.se</kw>[n]</tt> (where n is the sound effect buffer number 0~).
</dd>
<dt><kw>BGM Object</kw></dt>
<dd>
The BGM object is a <kw>BGM class</kw> object (described in BGM.tjs).<r/>
It can be accessed via <tt><kw>kag.bgm</kw></tt>.
</dd>
<dt><kw>Menu</kw></dt>
<dd>
The menu object can be accessed via <tt><kw>kag.menu</kw></tt>. kag.menu is a
MenuItem class object, and kag.menu itself represents the menu bar, with registered items
appearing in the menu bar as its children.<r/>
Menu items are created in Menus.tjs, but since Menus.tjs might need to be modified
directly for system updates, it's better to create an AfterInit.tjs and write modifications there.
</dd>
</dl>
</para>

<para>
<ptitle>Cautions When Using TJS</ptitle>
If you directly manipulate something without going through KAG's save system, that manipulation cannot be restored when loading a save.<r/>
While KAG plugins can hook into onStore and onRestore to handle saving states, caution is needed when this isn't implemented.<r/>
For example, when using Layer class drawing methods to modify the content of background or foreground layers managed by KAG, care must be taken. KAG records which images are loaded into layers, but does not record drawing modifications made to layers. Therefore, if you exceed the "saveable state level" in this state, save, and then load that save, the modifications made to the layers cannot be restored.<r/>
In such cases, you can either clear the image before reaching the "saveable state level" and let KAG return to its managed state by loading the next image, or handle it by not exceeding the "saveable state level".<r/>
When using TJS, please be mindful of its relationship with saves.<r/>
</para>

<para>
<ptitle>Useful Operators and Functions for Conditions and Display</ptitle>
<dl>
<dt><tt><kw>&&</kw></tt> and <tt><kw>||</kw></tt></dt>
<dd>
These are logical operators, where <tt>&&</tt> represents "and" and <tt>||</tt> represents "or".<r/>
For example, if you want to check if <tt>f.flag1</tt> is 1 and <tt>f.flag2</tt> is 1, you can write:<r/>
<r/>
<tt>[if exp="f.flag1==1 && f.flag2==1"]</tt><r/>
<r/>
Or if you want to check if f.flag1 is either 1, 2, or 3, you can write:<r/>
<r/>
<tt>[if exp="f.flag1==1 || f.flag1==2 || f.flag1==3"]</tt><r/>
<r/>
(If f.flag1 is numeric, you could also write <tt>f.flag1>=1 && f.flag1<=3</tt>)<r/>
Like normal arithmetic operators, <tt>&&</tt> and <tt>||</tt> have different precedence, with <tt>&&</tt> having higher priority.<r/>
Therefore, if you want to check if <tt>f.flag1</tt> is 1 and <tt>f.flag2</tt> is either 3 or 5, you need to use parentheses like this:<r/>
<r/>
<tt>[if exp="f.flag1==1 && (f.flag2==3 || f.flag2==5)"]</tt><r/>
</dd>

<dt><tt><kw>random</kw></tt> and <tt><kw>intrandom</kw></tt></dt>
<dd>
random returns a random decimal number between 0 (inclusive) and 1 (exclusive).<r/>
<r/>
<example>@eval exp="f.ransuu = random"</example>
<r/>
In the above example, f.ransuu will contain a random decimal number between 0 and 1.<r/>
<r/>
In contrast, intrandom is a function that returns a random integer between specified minimum and maximum values (inclusive).<r/>
<r/>
Format: <tt>intrandom(<b>minimum</b>, <b>maximum</b>)</tt><r/>
<r/>
<example>@eval exp="f.ransuu = intrandom(0, 5)"</example>
<r/>
The above example will store a random integer between 0 and 5 (inclusive) in f.ransuu.
</dd>

<dt><tt><kw>length</kw></tt></dt>
<dd>
length is a property used to get the length of a string. To use it, add .length after a variable containing a string.<r/>
<r/>
<example>[if exp="f.namae.length>=8"]Name is too long.[l][jump target=*input][endif]</example>
<r/>
In the above example, if f.namae's length is 8 or more characters, it will display "Name is too long" and jump to the *input label.<r/>
Characters are counted as one character each, regardless of whether they are single-byte or double-byte. This is the same for other string manipulation functions.
</dd>

<dt><tt><kw>substring</kw></tt></dt>
<dd>
substring is used to extract a portion of a string (create a substring).<r/>
To use it, after a variable (or string literal) containing the string, add a dot and write:<r/>
<r/>
<tt>substring(<b>start_position</b>, <b>length</b>)</tt><r/>
<r/>
The start position begins at 0 for the first character.<r/>
<r/>
For example, to extract the second character from f.furigana variable, use <tt>f.furigana.substring(1, 1)</tt><r/>
<r/>
<example>@emb exp="f.furigana.substring(1, 1)"</example>
<r/>
The above example will display the second character of the f.furigana variable.
</dd>

<dt><tt><kw>indexOf</kw></tt></dt>
<dd>
indexOf finds the first position where a substring appears within a string. This can be used to check if a string contains another string.<r/>
<r/>
Format: <tt><b>string</b>.indexOf(<b>search_string</b>)</tt><r/>
<r/>
For example, if the string is <tt>"ABCDEFGHIJKL"</tt> and the search string is <tt>"ABC"</tt>, <tt>"ABCDEFGHIJKL".indexOf("ABC")</tt> returns <b>0</b>. For search string <tt>"BCD"</tt> it returns <b>1</b>, for <tt>"DEF"</tt> it returns <b>3</b>.
If the search string isn't found in the string, it returns <b>-1</b>, so you can check if a string contains a substring by comparing with -1.<r/>
<r/>
<example>[if exp="'???'.indexOf(f.objname)!=-1"]...[endif]</example>
<r/>
The above example will execute the code until endif if <tt>f.objname</tt> is one of <tt>"?" "?" "?" "??" "??" "???"</tt>.<r/>
If you want to exclude <tt>"??" "??" "???"</tt> (only allow <tt>"?" "?" "?"</tt>), you can use a separator character (like below) that won't appear in f.objname.<r/>
For example, you could write:<r/>
<r/>
<tt>[if exp="'?\v?\v?'.indexOf(f.objname)!=-1"]...[endif]</tt>
<r/>
(\v is a character that normally won't appear in f.objname)<r/>
<r/>
The following example executes until endif if f.itemname contains the string '???':<r/>
<r/>
<example>[if exp="f.itemname.indexOf('???')!=-1"]...[endif]</example>
</dd>

<dt><kw>Regular Expressions</kw></dt>
<dd>
You can use regular expression patterns (text between / and /) to perform pattern matching and searching on strings.<r/>
The regular expression patterns themselves are very similar to Perl's regular expressions (while usage differs, the patterns are mostly compatible).<r/>
<r/>
To test if a string matches a pattern, use <tt><kw>test</kw></tt>.<r/>
<r/>
<example>[if exp="/[^0-9]/.test(f.nyuryoku)"]The input contains non-numeric characters[endif]</example>
<r/>

The above example uses test with a regular expression pattern. test is a method (of the regular expression object) that returns true if there's a match and false if there isn't. In this example, it uses the pattern <tt>[^0-9]</tt> to check if <tt>f.nyuryoku</tt> contains any non-numeric characters.<r/>
<r/>
To split strings, use <tt><kw>match</kw></tt>. <tt>match</tt> returns an array object. If there's no match to the pattern, the array's length (<tt>count</tt>) will be 0. Otherwise, element 0 contains the entire matched string, and elements 1 and onwards contain the matches corresponding to parenthesized groups in the pattern.<r/>
<r/>
<example>
[eval exp="f.matched = /([0-9?-?]+)[-|]([0-9?-?]+)/.match(f.input)"]<r/>
[if exp="f.matched.count == 0"]Please input in the format "number-number".[jump target=*input][endif]<r/>
[eval exp="f.s1 = str2num(f.matched[1]), f.s2 = str2num(f.matched[2])"]<r/>
</example>
The above example tests if <tt>f.input</tt> matches the "number-number" format, and if it matches, converts the numbers before and after the hyphen to numeric values and stores them in <tt>f.s1</tt> and <tt>f.s2</tt>.
</dd>

<dt><tt><kw>str2num</kw></tt></dt>
<dd>
str2num converts a string to a numeric value.<r/>
<r/>
Format: <tt>str2num(<b>string or variable containing string</b>)</tt><r/>
<r/>
The difference from the <tt>+</tt> operator is that <tt>str2num</tt> can convert full-width numeric characters to values. This is useful when using input tag where users might input full-width numbers. If the string cannot be recognized as a number, it returns 0.<r/>
<r/>
<example>[input name="f.kazu" prompt="Please input a number"][emb exp="f.kazu=str2num(f.kazu)"]</example>
</dd>

<dt><tt><kw>kansuuji</kw></tt> and <tt><kw>kansuuji_simple</kw></tt></dt>
<dd>
<tt>kansuuji</tt> converts specified numeric values to Japanese number notation. <tt>kansuuji_simple</tt> does the same but without unit positions.<r/>
For example, the number 9223372036854775807 would be converted to "??????????????????????????????????" with <tt>kansuuji</tt>, and to "???????????????????" with <tt>kansuuji_simple</tt>.<r/>
<example>
@emb exp="kansuuji(f.num)"<r/>
</example>
The above example displays f.num in Japanese number notation.<r/>
</dd>

<dt><tt><kw>number_format</kw></tt></dt>
<dd>
<tt>number_format</tt> formats a numeric value with commas every three digits. For example, 9223372036854775807 would be formatted as "9,223,372,036,854,775,807".<r/>
<example>
@emb exp="number_format(f.num)"<r/>
</example>
The above example displays f.num with commas separating every three digits.<r/>
</dd>

<dt><tt><kw>Storages.addAutoPath</kw> and <kw>System.exePath</kw></tt></dt>
<dd>
Storages.addAutoPath adds a search path for resources.<r/>
System.exePath returns the folder where the game engine executable is installed.<r/>
While more details can be found in the game engine SDK Help, these can be used to set search paths for archives and folders.<r/>
Search paths are a mechanism that automatically looks for files without explicitly specifying folders. By default, system, image, scenario, bgimage, fgimage, bgm, sound, rule, others, and video are all set, but you can add more using Storages.addAutoPath.<r/>
System.exePath is the folder containing the game engine executable.<r/>
<r/>
For example, if you want to add a folder named 'cgdata' inside the game executable's folder to the search path:<r/>
<r/>
<tt>[eval exp="Storages.addAutoPath(System.exePath + 'cgdata/')"]</tt><r/>
<r/>
(The trailing / after cgdata is required)<r/>
<r/>
Similarly, if you have an archive file named cgdata.xp3 in the same location as the game executable and want to set a search path inside this archive:<r/>
<r/>
<tt>[eval exp="Storages.addAutoPath(System.exePath + 'cgdata.xp3>')"]</tt><r/>
<r/>
The symbol after cgdata.xp3 is '>'. Use '>' for searching inside archives and '/' for searching in folders.<r/>
The archive symbol was changed from '#' to '>' in game engine 2.19 beta 14.<r/>
</dd>

<dt><tt><kw>Storages.searchCD</kw></tt></dt>
<dd>
Storages.searchCD returns the drive letter of the CD drive containing a CD with the specified volume label.<r/>
For example, combining with the above Storages.addAutoPath, to add a search path to the 'image' folder on a CD-ROM labeled FOO_BAR_DISC:<r/>
<r/>
<tt>[eval exp="Storages.addAutoPath(Storages.searchCD('FOO_BAR_DISC') + ':image/')"]</tt><r/>
<r/>
Since Storages.searchCD returns an empty string if no CD with the specified volume label is found, you can check if the required CD-ROM is inserted like this:<r/>
<r/>
<tt>[if exp="Storages.searchCD('FOO_BAR_DISC') == ''"]CD is not inserted[endif]</tt><r/>
</dd>

<dt><tt><kw>System.readRegValue</kw></tt></dt>
<dd>
System.readRegValue allows reading values stored in the registry. For example, to read HKEY_LOCAL_MACHINE\SOFTWARE\Dee\kirikiri\installpath into f.installpath:<r/>
<r/>
<tt>[eval exp="f.installpath = System.readRegValue('HKEY_LOCAL_MACHINE\\SOFTWARE\\Dee\\kirikiri\\installpath')"]</tt>
<r/>
Note that in strings enclosed by '', \ must be written as \\.<r/>
Only string and numeric values can be read. If the registry value doesn't exist, it returns void, so you can use the === (identity operator) like:<r/>
<r/>
<tt>[if exp="f.installpath === void"]Not installed[endif]</tt><r/>
</dd>

<dt><tt><kw>kag.clickCount</kw></tt></dt>
<dd>
This increases by 1 each time the screen is clicked with the mouse. You can write to this variable, so if you set it to 0, you can detect when the mouse has been clicked by checking if this variable has become non-zero.
</dd>

<dt><tt><kw>kag.lastMouseDownX</kw> and <kw>kag.lastMouseDownY</kw></tt></dt>
<dd>
These represent the coordinates of the last mouse click. kag.lastMouseDownX is the X coordinate of the last click, and kag.lastMouseDownY is the Y coordinate of the last click.
</dd>

<dt><tt><kw>kag.lastWaitTime</kw></tt></dt>
<dd>
When using the wait tag with mode=until, this is set to the actual time the wait tag took to complete. If the waiting time has already passed, it becomes 0, so by checking if this variable is non-zero during a wait tag, you can determine if waiting is still in progress.<r/>
Note that if the wait is interrupted by a click or similar action, this variable doesn't accurately represent the actual waiting time (it shows the time it would have taken without interruption).
</dd>

<dt><tt><kw>kag.skipMode</kw></tt></dt>
<dd>
This contains a value indicating the current skip mode. 0=no skip, 1=skip until click, 2=skip until page, 3=skip until stop.<r/>
For example, if you don't want to play sound effects during skip mode:<r/>
<r/>
<tt>@playse cond="kag.skipMode<=1" storage="hogehoeg.wav"</tt><r/>
</dd>

<dt><tt><kw>kag.autoMode</kw></tt></dt>
<dd>
This becomes true during auto-read mode and false otherwise.<r/>
For example, if you want to wait for sound effects to finish only during auto-read mode:<r/>
<r/>
<tt>@ws cond="kag.autoMode"</tt><r/>
</dd>

<dt><tt><kw>kag.getBookMarkPageName</kw></tt></dt>
<dd>
<tt>kag.getBookMarkPageName</tt> can get the name of the save location for the specified number (0~) in quick save mode.<r/>
This can be used when you want to let users choose which save to load from the screen, rather than from the KAG menu.<r/>
Use this in combination with <tt>kag.restoreBookMark</tt>.
<r/>
<example>
[locate x=10 y=100][link exp="kag.restoreBookMark(0)"][emb exp="kag.getBookMarkPageName(0)"][endlink]<r/>
[locate x=10 y=130][link exp="kag.restoreBookMark(1)"][emb exp="kag.getBookMarkPageName(1)"][endlink]<r/>
(and so on)<r/>
</example>
</dd>

<dt><tt><kw>mp</kw></tt></dt>
<dd>
<tt>mp</tt> represents a hash array containing parameters passed to a macro.<r/>
<example>
@macro name=fimg<r/>
@image *<r/>
@eval exp="sf[mp.storage]=1"<r/>
@endmacro<r/>
</example>
For example, if <tt>@fimg layer=base page=fore storage="bg_03"</tt> is called, during macro execution <tt>mp.layer</tt> will be 'base', <tt>mp.page</tt> will be 'fore', and <tt>mp.storage</tt> will be 'bg_03'. In other words, you can access parameter values by specifying the parameter name after <tt>mp.</tt><r/>
When this macro is used like <tt>@fimg layer=base page=fore storage="bg_03"</tt>, the exp tag executes <tt>sf[mp.storage]=1</tt>, setting <tt>sf['bg_03']</tt> to 1.<r/>
This macro can be used alongside image/img tags to automatically record displayed images in system variables.
</dd>

<dt><tt><kw>System.getKeyState</kw></tt></dt>
<dd>
<tt>System.getKeyState</tt> can determine if a specified key is currently pressed.<r/>
<example>
@jump target=*shift_key_pressed cond="System.getKeyState(VK_SHIFT)"<r/>
; Jump to *shift_key_pressed if the shift key is pressed<r/>
</example>
Please refer to the game engine SDK Help for details.<r/>
<r/>
KAG3 accepts input from game pads (joysticks), but there may be cases where proper operation is impossible when something is resting on the game pad or the joystick's neutral position is off.<r/>
You can warn users if a game pad button is pressed at the start of a scene (normally, game pad buttons shouldn't be pressed at scene start, and if they are, it's likely something is unintentionally pressing them).<r/>
With USB-connected game pads, the example below might not detect "stuck buttons", so please supplement with documentation, etc.<r/>
<example>
@if exp="System.getKeyState(VK_PADANY)"<r/>
@wait time=500<r/>
@if exp="System.getKeyState(VK_PADANY)"<r/>
; VK_PADANY returns true when any game pad button is pressed<r/>
; If it's still pressed after 500ms (0.5 seconds), show a message<r/>
A game pad (joystick) button appears to be stuck.<r/>
Please check if something is resting on the game pad, or if the joystick<r/>
neutral position is off.<r/>
If the situation doesn't improve, please disconnect the game pad (joystick).<r/>
If the problem persists, please exit the game, launch "Engine Settings",<r/>
and set "Input-Pad Usage" to "Don't Use".<r/>
[s]<r/>
@endif<r/>
@endif<r/>
</example>

</dd>

<dt><tt><kw>System.shellExecute</kw></tt></dt>
<dd>
System.shellExecute opens the file specified as its parameter. When specifying a URL, it opens the browser, so using this with link tags allows you to create links to web pages.<r/>
<r/>
<example>[link exp="System.shellExecute('http://www.yahoo.co.jp/')"]http://www.yahoo.co.jp/[endlink]</example>
</dd>

<dt><tt><kw>kag.close</kw></tt> and <tt><kw>kag.shutdown</kw></tt></dt>
<dd>
kag.close terminates KAG. If exit confirmation is enabled in settings, it will show the confirmation dialog.<r/>
kag.shutdown also terminates KAG but without showing the confirmation dialog.<r/>
Note that using System.exit() for termination should <b>not be used</b> as it might terminate without saving system variables. Also, don't specify these in eval tag's exp attribute (use the close tag instead).<r/>
<r/>
<example>
[link exp="kag.close()"]Exit[endlink]<r/>
[link exp="kag.shutdown()"]Exit[endlink]<r/>
</example>
</dd>

<dt><tt><kw>kag.restoreBookMark</kw></tt> and <tt><kw>kag.storeBookMark</kw></tt></dt>
<dd>
kag.restoreBookMark loads a save state with the specified number in quick save mode.<r/>
Similarly, kag.storeBookMark saves a save state with the specified number.<r/>
However, calling these directly might allow save operations even when [store] tag save operations are prohibited.<r/>
These return true if successful and false if they fail.<r/>
Please refer to the kag.getBookMarkPageName section above.
</dd>

<dt><tt><kw>kag.loadBookMarkFromFileWithAsk</kw></tt> and <tt><kw>kag.saveBookMarkToFileWithAsk</kw></tt></dt>
<dd>
kag.loadBookMarkFromFileWithAsk displays a file selection dialog box in free save mode and lets the user select a save file. When the user clicks OK, it loads that save.<r/>
Similarly, kag.saveBookMarkToFileWithAsk displays a file selection dialog box and saves the state.<r/>
These return true if successful and false if the user cancels or if they fail.<r/>
<example>
[link exp="kag.loadBookMarkFromFileWithAsk()"]Load Save[endlink]<r/>
[link exp="kag.saveBookMarkToFileWithAsk()"]Save[endlink]<r/>
</example>
</dd>

<dt><tt><kw>kag.callExtraConductor</kw></tt></dt>
<dd>
kag.callExtraConductor is used to call KAG scenarios as subroutines from TJS scripts. When calling scenarios with this method, the scenario must be stopped with a click wait or s tag (this can be detected through kag.inStable or KAG plugin's onStableStateChanged).<r/>
kag.callExtraConductor takes three parameters.<r/>
The first parameter is the scenario file to call. The second parameter is the label to call.<r/>
The third parameter is optional but specifies a function/method to execute when the KAG scenario returns. You can omit this if not needed.<r/>
<r/>
<example>[button graphic="showhist" exp="kag.callExtraConductor('rclick.ks', '*showhist')"]</example>
<r/>
The called subroutine's processing follows the right-click subroutine processing.<r/>
This function cannot be used while already calling a KAG scenario from a right-click subroutine using this functionality.
</dd>

<dt><tt><kw>kag.se[n].play</kw></tt></dt>
<dd>
The play method of the sound effect buffer starts playing a sound effect.<r/>
Use it in the following format:<r/>
<r/>
<bq>kag.se[sound_buffer_number].play(%[storage: sound_file_name, loop: whether_to_loop]);</bq>
<r/>
For example, if you specify the following in a link tag's onenter attribute, it will play a sound effect when the mouse cursor hovers over the option:<r/>
<r/>
<example>[link target=*foo onenter="kag.se[0].play(%[storage:'select.wav', loop: false])"]Option~[endlink]</example>
<r/>
In this example, it plays select.wav in sound buffer 0 without looping. This is useful when you want to play sound effects from TJS scripts.
</dd>
</dl>
</para>

<para>
<ptitle>Arrays</ptitle>
Arrays can be easily used in game engine 2/KAG3.<r/>
To use arrays, you must first declare them using <tt><kw>[ ]</kw></tt>.<r/>
<r/>
<example>[eval exp="f.hairetsu = []"]</example>
<r/>
The above example declares f.hairetsu as an array. Note that while this declares f.hairetsu as an array, its contents are cleared, even if it previously contained numbers or other values.<r/>
For system variables or similar where you want to use arrays, you can use the fact that variables are void by default to declare arrays only once like this:<r/>
<r/>
<example>[eval exp="sf.hairetsu = [] if sf.hairetsu === void"]</example>
<r/>
This way, the array is only declared the first time. The array won't be cleared on subsequent runs.<r/>
<r/>
To assign values to an array, use <tt>[ ]</tt>. Inside <tt>[ ]</tt>, specify the index (element number). Indices start from 0.<r/>
<r/>
<example>[eval exp="f.hairetsu[0] = 'zero', f.hairetsu[1] = 'one'"]</example>
<r/>
The above example assigns 'zero' to <tt>f.hairetsu[0]</tt> and 'one' to <tt>f.hairetsu[1]</tt>.<r/>
You don't need to declare the array size. It will automatically expand as needed. To get or set the number of elements in an array, use the <tt><kw>count</kw></tt> property like <tt>f.hairetsu.count</tt>.<r/>
<r/>
Let's display the values:<r/>
<r/>
<example>0 : [emb exp="f.hairetsu[0]"]    1 : [emb exp="f.hairetsu[1]"]</example>
<r/>
Using two-dimensional arrays is a bit more complex, but possible:<r/>
<bq>
@iscript<r/>
// Create a two-dimensional array with 5 elements in the first dimension<r/>
f.twodim = [] if f.twodim === void; // Create first dimension array in twodim<r/>
for(var i = 0; i < 5; i++) f.twodim[i] = [] if f.twodim[i] === void;<r/>
// Now f.twodim[0] through f.twodim[4] are arrays, so<r/>
// you can specify like f.twodim[0][3] or f.twodim[4][2]<r/>
@endscript<r/>
<r/>
// Or, more simply, create an array with 5 elements in the first dimension like this:<r/>
f.twodim = [ [], [], [], [], [] ];<r/>
// (When creating an array with [], you can specify initial elements separated by commas,<r/>
//  and in this case specify arrays as child elements)<r/>
</bq>
</para>

<para>
<ptitle>Associative Arrays</ptitle>
Associative arrays (also called hash arrays) can be used in game engine 2/KAG3.<r/>
An associative array is an array where you can create pairs of names and corresponding values.<r/>
To use an associative array, you must first declare it using <tt><kw>%[ ]</kw></tt>.<r/>
<r/>
<example>[eval exp="f.dict = %[]"]</example>
<r/>
The above example declares f.dict as an associative array. The same cautions about clearing contents apply as with regular arrays.<r/>
<r/>
To assign values to an associative array, use <tt>[ ]</tt> (not <tt>%[ ]</tt>). Inside <tt>[ ]</tt>, specify the "name" to be used as the key.<r/>
<r/>
<example>[eval exp="f.dict['zero'] = 0, f.dict['one'] = 1"]</example>
<r/>
The above example assigns <tt>0</tt> to <tt>f.dict['zero']</tt> and <tt>1</tt> to <tt>f.dict['one']</tt>. The difference from regular arrays is what you specify inside <tt>[ ]</tt>.<r/>
<r/>
Let's display the values:<r/>
<r/>
<example>zero : [emb exp="f.dict['zero']"]    one : [emb exp="f.dict['one']"]</example>
<r/>
Note that you can also use <tt>.</tt> instead of <tt>[ ]</tt>. You can write <tt>f.dict.zero</tt> instead of <tt>f.dict['zero']</tt>, and <tt>f.dict.one</tt> instead of <tt>f.dict['one']</tt> (however, you can't use names that can't be used as "identifiers" after the dot).<r/>
<r/>
Actually, KAG's <tt>f</tt> and <tt>sf</tt> themselves are associative arrays, so when you write <tt>f.dict</tt>, you're accessing the value with the name 'dict' in the associative array (though you can also access it as <tt>f['dict']</tt>).<r/>
</para>

<para>
<ptitle>Getting Date/Time</ptitle>
To get the current date and time, do the following:<r/>
<bq>
[iscript]<r/>
{<r/>
    // Wrapping in { } within iscript/endscript makes variables declared inside<r/>
    // local variables (otherwise they become global variables)<r/>
    var d = new Date(); // Create Date class object<r/>
    // The Date class object, when created without parameters,<r/>
    // holds the current time at creation<r/>
    f.year = d.getYear();  // f.year = year<r/>
    f.month = d.getMonth() + 1; // f.month = month<r/>
    f.date = d.getDate(); // f.date = day<r/>
    f.hours = d.getHours(); // f.hours = hours<r/>
    f.minutes = d.getMinutes(); // f.minutes = minutes<r/>
    f.seconds = d.getSeconds(); // f.seconds = seconds<r/>
}<r/>
[endscript]<r/>
</bq>
</para>

<para>
<ptitle>process</ptitle>
<tt>kag.process</tt> executes a scenario from a specified position.<r/>
The first parameter is the scenario file to load. If an empty string is specified, it uses the current scenario file.<r/>
The second parameter is the label where execution should begin. If an empty string is specified, execution starts from the beginning of the scenario file.<r/>
<r/>
<example>
kag.process('', '*label2')<r/>
kag.process('scenario4.ks', '*label5')<r/>
</example>
<r/>
Be careful as this will automatically return to that label if the scenario tries to return.<r/>
</para>

<para>
<ptitle>leftClickHook, rightClickHook, keyDownHook</ptitle>
KAG has a feature called hooks that calls registered functions when left-clicking, right-clicking, or when keys are pressed.<r/>
Hooks are arrays that can register multiple functions. They can be accessed as <tt>kag.leftClickHook</tt>, <tt>kag.rightClickHook</tt>, and <tt>kag.keyDownHook</tt>.<r/>
If a registered function returns true, KAG will not execute the functionality it normally would for that action. For example, if a function registered to keyDownHook returns true when the R key is pressed, the normal "show message history" function won't execute.<r/>
<r/>
leftClickHook and rightClickHook functions receive no parameters.<r/>
leftClickHook is also triggered by the Enter key and Space key. However, it's not triggered when clicking on choices and similar elements.<r/>
<r/>
<example>
@iscript<r/>
function myLeftClickHook()<r/>
{<r/>
    kag.process('', '*label');<r/>
    return true;<r/>
}<r/>
@endscript<r/>
@eval exp="kag.leftClickHook.add(myLeftClickHook)"<r/>
@s<r/>
<r/>
*label<r/>
@eval exp="kag.leftClickHook.remove(myLeftClickHook)"<r/>
Yaa~.<r/>
@s<r/>
</example>
<r/>
The above example will execute *label when clicked.<r/>
Be careful as it automatically jumps to *label. When using transitions or automatic movement, it's safer to stop execution with stoptrans or stopmove tags.<r/>
<r/>
keyDownHook functions receive two parameters: the first is the virtual key code of the pressed key, and the second is the state of shift-type keys that were pressed simultaneously. Please refer to the game engine SDK Help for details.<r/>
<r/>
<example>
@iscript<r/>
function myKeyDownHook(key, shift)<r/>
{<r/>
    if(key == #'R')<r/>
    {<r/>
        // When R key is pressed<r/>
        kag.process('', '*label');<r/>
        return true;<r/>
    }<r/>
}<r/>
@endscript<r/>
@eval exp="kag.keyDownHook.add(myKeyDownHook)"<r/>
@s<r/>
<r/>
*label<r/>
@eval exp="kag.keyDownHook.remove(myKeyDownHook)"<r/>
Yaa~.<r/>
@s<r/>
</example>
</para>

<para>
<ptitle>touchImages</ptitle>
<tt>System.touchImages</tt> loads images into cache.<r/>
For details, please refer to the System.touchImages section in the game engine documentation. This method can be used during waiting periods to preload images.<r/>
When used in KAG, it works for foreground and background images (those without key attribute specified). For images specified in image or img tags' storage attribute, specify them as an array in the storages parameter.<r/>
It's recommended to specify -2*1024*1024 for the second parameter.<r/>
For the third parameter, it's recommended to specify around 200ms as the wait time.<r/>
<r/>
<example>
@resetwait<r/>
@eval exp="System.touchImages(['24_5', '24_4', 'uni', '24'], -2*1024*1024, 800)"<r/>
@wait mode=until time=1000<r/>
</example>
<r/>
However, this method is non-deterministic in that it doesn't guarantee images will be in cache. Therefore, it shouldn't be used in situations where images absolutely must be preloaded. For such cases, use the assignImages method described later for a more reliable approach.<r/>
</para>

<para>
<ptitle>assignImages</ptitle>
<tt>assignImages</tt> copies images from one layer to another.<r/>
For example:<r/>
<r/>
<tt>@eval exp="kag.fore.base.assignImages(kag.fore.layers[0])"</tt><r/>
<r/>
This copies the image loaded in foreground layer 0 to the foreground base layer.<r/>
assignImages doesn't actually copy the image data, it just creates a reference indicating "these images are the same," so it's fast. In scene transitions where loading images during the transition might cause stuttering, you can use this by preloading images into foreground layers and copying them to background layers when needed.<r/>
</para>

<para>
<ptitle>Using the hact Tag</ptitle>
The hact tag allows executing arbitrary TJS code when message history is clicked, enabling voice playback functionality (like playing corresponding voice files when clicking messages in adventure games).<r/>
Below is an example implementing this, with a macro pv for playing voices and a macro sv for stopping voices:<r/>
<example>
@iscript<r/>
function stopAllVoices()<r/>
{<r/>
    // Stop all sound effects in buffers 2 through 6<r/>
    for(var i = 2; i <= 6; i++) kag.se[i].stop();<r/>
}<r/>
function playVoice(buf, storage)<r/>
{<r/>
    // Play storage in sound buffer buf<r/>
    // Don't do anything if KAG is in skip mode<r/>
    if(!kag.skipMode)<r/>
    {<r/>
        stopAllVoices();<r/>
        kag.se[buf].play(%[ storage : storage ]);<r/>
    }<r/>
}<r/>
function createHistoryActionExp(buf, storage)<r/>
{<r/>
    // Generate TJS code to execute when message history is clicked<r/>
    return "stopAllVoices(), kag.se[" + buf  +"].play(%[ storage : '" + storage + "' ])";<r/>
}<r/>
@endscript<r/>
@macro name=pv<r/>
@hact exp="&createHistoryActionExp(mp.b, mp.s)"<r/>
@eval exp="playVoice(mp.b, mp.s)"<r/>
@endmacro<r/>
@macro name=waitvoices<r/>
@ws buf=2<r/>
@ws buf=3<r/>
@ws buf=4<r/>
@ws buf=5<r/>
@ws buf=6<r/>
@endmacro<r/>
@macro name=sv<r/>
@endhact<r/>
@waitvoices cond="kag.autoMode"<r/>
@eval exp="stopAllVoices()"<r/>
@endmacro<r/>
</example>

The createHistoryActionExp function generates TJS code to be passed to the hact tag's exp attribute. This code will be executed when clicked.<r/>
<r/>
Here's how to use these macros:<r/>
<r/>
<example>
[pv b=2 s=hoge.ogg]Hoge[l][sv][r]<r/>
[pv b=3 s=hogera.ogg]Hogera[l][sv][r]<r/>
[pv b=4 s=hogemoge.ogg]Hogemoge[p][sv]<r/>
</example>
</para>

<para>
<ptitle>Scripts Executed During Initialization</ptitle>
KAG provides functionality to execute arbitrary TJS scripts at various stages during system initialization for customization purposes. The following methods are available in this version:<r/>
<r/>
<dl>
<dt><kw>Override.tjs</kw></dt>
<dd>
This file is executed after MainWindow.tjs is loaded, if it exists. This file doesn't exist by default, so create it if needed.
</dd>

<dt><kw>AfterInit.tjs</kw></dt>
<dd>
This is executed right before first.ks runs, after all initializations are complete. This file doesn't exist by default, so create it if needed.
</dd>

<dt>"<kw>Additional Settings</kw>"</dt>
<dd>
In Config.tjs, there are sections marked as "Additional Settings" for window and behavior settings. Content written in these sections is executed at various stages during Config.tjs execution.
</dd>
</dl>
</para>

<para>
<ptitle>Customizing Menus</ptitle>
To add menu items, such as a simple on/off setting option, add content like this to AfterInit.tjs:<r/>
<r/>
<example>
kag.menu.insert(kag.optionsMenu =<r/>
    new KAGMenuItem(this, "Options(&G)", 0, void, false), 2);<r/>
kag.optionsMenu.stopRecur = true;<r/>
<r/>
kag.optionsMenu.add(<r/>
    kag.doTransMenuItem = new KAGMenuItem(<r/>
        this,<r/>
        "Execute Screen Transitions(&T)",<r/>
        0,<r/>
        function(sender) { sf.dotrans = sender.checked = !sf.dotrans; },<r/>
        false));<r/>
<r/>
if(sf.dotrans === void) sf.dotrans = true;<r/>
kag.doTransMenuItem.checked = sf.dotrans;<r/>
<r/>
kag.optionsMenu.add(<r/>
    kag.playSEItem = new KAGMenuItem(<r/>
        this,<r/>
        "Play Sound Effects(&S)",<r/>
        0,<r/>
        function(sender) { sf.playse = sender.checked = !sf.playse; },<r/>
        false));<r/>
<r/>
if(sf.playse === void) sf.playse = true;<r/>
kag.playSEItem.checked = sf.playse;<r/>
</example>

<tt>kag.menu.insert(kag.optionsMenu = new KAGMenuItem(this, "Options(&G)", 0, void, false), 2);</tt> inserts an "Options" menu into KAG's menu bar. kag.optionMenu becomes the object for this "Options" menu. The second parameter of the insert method specifies where to insert the menu item.<r/>
The next line sets this object's stopRecur to true, which prevents unnecessary menu item searching when kag.internalSetMenuAccessibleAll is called.<r/>
<r/>
Then child menu items are created and added to kag.optionMenu using the add method.<r/>
<r/>
The fourth parameter of KAGMenuItem specifies the function to execute when the menu item is clicked.<r/>
<r/>
<tt>if(sf.dotrans === void) sf.dotrans = true;</tt> initializes sf.dotrans with a default value if it's void (has no value set). <tt>kag.doTransMenuItem.checked = sf.dotrans;</tt> sets the initial checked state of the menu item. Since it's recorded in system variables, the setting persists even after the program is closed.<r/>
<r/>
With sf.dotrans and sf.playse recording the current menu state, you can use them like:<r/>
<r/>
<tt>@playse storage="kon.wav" cond="sf.playse"</tt>
<r/>
I think this should be fairly practical to use.<r/>
</para>

<para>
<ptitle>Creating KAG Plugins</ptitle>
You can extend KAG's functionality by creating plugins by making subclasses of the <kw>KAGPlugin class</kw> and registering them with KAG.<r/>
I believe samples are distributed with KAG's distribution files, so please refer to those.<r/>
</para>

</doc>