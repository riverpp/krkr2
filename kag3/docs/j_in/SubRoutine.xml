<?xml version="1.0" encoding="ISO-8859-1" ?>

<doc>
<title>Using Subroutines</title>

<para>
<ptitle>What are Subroutines</ptitle>
A subroutine is a collection of operations that can be "called" from other parts of the code. When the subroutine's operations finish, it returns to where it was called from.<r/>
<r/>
While similar in function to macros <comlink href="Macro"/>, subroutines are used for more fundamental operations whereas macros are tools for simple operations.<r/>
</para>

<para>
<ptitle>Basic Usage of Subroutines</ptitle>
Subroutines are identified by labels, so we define a label. Use the <kw>return</kw> tag to return from a subroutine call, and the <kw>call</kw> tag to call a subroutine.<r/>
Here's an example:<r/>
<bq>
[wait time=200]<r/>
*start|Start<r/>
[cm]<r/>
Calling subroutine.[l][r]<r/>
<b>[call target=*subroutine]</b><r/>
Subroutine has been called.<r/>
[s]<r/>
<r/>
<b>*subroutine</b><r/>
This is a subroutine.[l][r]<r/>
Click to return to where it was called.[l][r]<r/>
<b>[return]</b><r/>
</bq>
<r/>
When this example runs, after the "Calling subroutine" message, it displays "This is a subroutine", and when clicked at "Click to return to where it was called", it displays "Subroutine has been called".<r/>
While the call tag jumps to the specified label, it automatically records the calling position, and the return tag automatically returns to that recorded calling position (this automatically recorded information is called the "<kw>call stack</kw>").<r/>
In this example, from <tt>*subroutine</tt> to <tt>[return]</tt> is the "subroutine".<r/>
<r/>
You can call other subroutines from within a subroutine. There's no limit to call depth (how many calls before a return).<r/>
<r/>
While we mentioned adding [cm] after labels in "Let's Try Selection", [cm] isn't necessary after labels that aren't save points (labels without |).<r/>
<r/>
<r/>
The call stack records the scenario filename, the label name before the scenario, the lines up to the call tag line, the contents of the call tag line, and position information in that line. Please be careful as during scenario debugging etc., you may return to incorrect positions if you change the structure of the returning scenario file.<r/>
Basically, for subroutine labels and within subroutines, you can use/not use labels that become save points (labels with |).<r/>
</para>

<para>
<ptitle>Notes About Subroutines</ptitle>
Using call to call itself will result in an infinite loop.<r/>
If call and return don't match properly, you may get errors where you can't return to the calling position at the return tag, no matter how much call stack remains, so please be careful.<r/>
<r/>
Also, like in this example:<r/>
<r/>
<bq>
*subroutine<r/>
...<r/>
[if exp="f.flag1"]<b>[jump target=*otherplaces1]</b>[endif]<r/>
[if exp="f.flag2"]<b>[jump target=*otherplaces2]</b>[endif]<r/>
...<r/>
[return]<r/>
<r/>
*otherplaces1<r/>
...<r/>
[return]<r/>
<r/>
*otherplaces2<r/>
;No return tag in this section...<r/>
</bq>
<r/>
Be careful when jumping to other locations from within a subroutine. When jumping to otherplaces1, since there's a return after the jump, the call-return balance isn't broken. However, when jumping to otherplaces2, since there's no return after the jump, this subroutine effectively "doesn't return". This breaks the call-return balance.<r/>
<r/>
If you want to return to an arbitrary location rather than the calling position, you can use the storage and target parameters of the return tag to return to any location.<r/>
</para>
</doc>