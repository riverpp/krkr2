<?xml version="1.0" encoding="ISO-8859-1" ?>

<doc>
<title>About Read/Unread Status</title>

<para>
<ptitle>Read/Unread Status</ptitle>
"Unread" means the user hasn't read the scenario yet, while "read" means the user has already read it.<r/>
KAG can change message display speed between read and unread text, and can also disable [l] tags for read text.<r/>
<r/>
Read/unread records are stored in system variables beginning with <tt>trail_</tt>. To enable read/unread recording, <tt>autoRecordPageShowing</tt> must be set to true in <tt>Config.tjs</tt>.<r/>
</para>

<para>
<ptitle>Read Text and Unread Text</ptitle>
In KAG, read/unread status is managed per label.<r/>
It's recorded in system variables formatted as <tt>trail_scenariofilename_label</tt>. For example, for a label called *start in first.ks, it would be <tt>sf.trail_first_start</tt>.<r/>
If this variable is void (undefined; treated as 0 when compared with numbers) it's unread, if 1 or higher it's read. Numbers higher than 1 indicate how many times it's been read.<r/>
<r/>
Basically, a "block" from one label to the next [s] tag is treated as a unit.<r/>
For example, with the following scenario, each colored section would be treated as one block:<r/>
<r/>
<include file="desc0._html"/>
<r/>
Read/unread status is managed based on these "blocks" as units.<r/>
<r/>
In this state, all text is considered unread.<r/>
</para>

<para>
<ptitle>Read Status</ptitle>
There are conditions for a "block" to be considered read. Specifically, a "block" is considered read and recorded in system variables when "the user reaches from the label to the [s] tag".<r/>
Also, if the user skips through a "block" using rapid advancement, it won't be considered read. The entire "block" must be read.<r/>
</para>

<para>
<ptitle>Scenario Branching and Read Status</ptitle>
The behavior changes when using links or jump tags to branch the scenario.<r/>
<r/>
<dl>
<dt>When jumping with links (link or button tags)</dt>
<dd>
When jumping to different parts of the scenario through user selection, it automatically becomes read.<r/>
For example:<r/>
<bq>
*select<r/>
This text becomes read when the user makes a selection.[r]<r/>
[link target=*t1]Choice 1[endlink][r]<r/>
[link target=*t2]Choice 2[endlink][r]<r/>
@wait time=3000<r/>
@jump target=*timeout<r/>
</bq>
If a selection is made before the @wait tag times out, it becomes read at that point. Note that in normal selection usage, there's usually an [s] tag after displaying choices with link tags, so it becomes read at that point.<r/>
Link and button tags have a contpage parameter which, when set to false, prevents marking as read when jumping.<r/>
</dd>
<dt>jump tag</dt>
<dd>
When jumping with the jump tag, it becomes read at that point. In this case, there's a contpage parameter which, when set to false, prevents marking as read.<r/>
</dd>
<dt>call and return</dt>
<dd>
When calling a subroutine with the call tag, it doesn't become read. In this case, there's a contpage parameter which, when set to true, marks it as read at that point.<r/>
The return tag marks that point as read (not the calling point, but the subroutine's return tag section becomes read). In this case, there's a contpage parameter which, when set to false, prevents marking as read.<r/>
</dd>
</dl>
</para>

</doc>