<?xml version="1.0" encoding="ISO-8859-1" ?>
<doc>
<title>Using Variables</title>

<para>
<ptitle>What are Variables</ptitle>
<r/>
Variables in KAG are:<r/>
<r/>
? Places to store any kind of information<r/>
<r/>
That's what they are.<r/>
<r/>
However, KAG is a system based on a scripting language called <kw>TJS2</kw>, and variables in KAG are TJS2 variables themselves, so they have quite powerful capabilities.<r/>
<r/>
Since this is a tutorial, I'll only explain basic usage, but when accessing methods and properties of KAG itself, or directly using TyranoScript functions, it becomes quite <b>dangerous</b>, so beginners should be careful (laugh).<r/>
</para>

<para>
<ptitle>Types of Variables</ptitle>
There are 3 types of variables in KAG. "<kw>Game variables</kw>" that are saved and loaded together with save data, "<kw>System variables</kw>" that retain values independently of save/load operations, and "<kw>Temporary variables</kw>" for temporarily storing values. "System variables" retain their values even after closing and restarting TyranoScript/KAG. "Temporary variables" are cleared when TyranoScript closes, and their values are not saved to saves.<r/>
<r/>
Game variables have the prefix <kw>f</kw>, system variables have <kw>sf</kw>, and temporary variables have <kw>tf</kw>.<r/>
<r/>
Also, KAG (or rather TJS2) variables can store both strings and numbers (the type of data stored in a variable is called its "<kw>type</kw>"). Variables can have (almost) any name, there's no limit to the number of variables, and no limit to string length. Values can be changed at any time.<r/>
From KAG 3.x onward, you can also use "arrays" and "dictionaries" (not covered here).<r/>
<note>
TJS2's integer type is 64bit, and floating-point type is double precision.<r/>
Strings are internally UNICODE, with no length limitation.<r/>
</note>
</para>

<para>
<ptitle>Valid Variable Names</ptitle>
In TyranoScript/KAG, you can name variables almost freely. However, even with this freedom, there are rules for variable names that TyranoScript/KAG can use.<r/>
<r/>
<dl>
<dt>Variable names can use half-width alphanumeric characters, full-width characters, and _ (underscore)</dt>
<dd>
Variable names like <b><tt>abc&amp;def</tt></b> or <b><tt>a-z</tt></b> cannot be used.<r/>
You can use underscores like <b><tt>final_count</tt></b> or full-width characters like <b><tt>Player Name</tt></b> (all full-width characters are usable).
</dd>
<dt>Variable names cannot start with half-width numbers</dt>
<dd>
Variable names like <b><tt>2friends</tt></b> or <b><tt>3com</tt></b> cannot be used (full-width numbers at the start are OK).
</dd>
</dl>
<r/>
Before these variable names, add <b><tt>f.</tt></b> for game variables, <b><tt>sf.</tt></b> for system variables, or <b><tt>tf.</tt></b> for temporary variables.
<r/>
For example, consider these variable names:<r/>
<r/>
<tt><b>f.flag1  sf.username  sf.playcount  tf.i  f.enokazu  f.variable1</b>...</tt><r/>
<r/>
Also, all newly created variables are initialized as 0 for numbers and '' (empty string) for strings. Generally, it's best to assign values to variables before using them.<r/>
<r/>
<note>
You might notice <b>f</b>, <b>sf</b>, <b>tf</b>, and <b>kag</b>. <b>kag</b> is used for directly accessing KAG's system functions.<r/>
</note>
</para>

<para>
<ptitle>Assigning to Variables</ptitle>
To assign values to variables, normally use the <kw>eval</kw> tag. For example, to assign 1000 to <tt>f.flag1</tt>...<r/>
<bq>
[eval exp="<b>f.flag1 <kw>=</kw> 1000</b>"]<r/>
</bq>
Place the variable name, followed by =, then specify the value to assign.<r/>
<r/>
For assigning strings:<r/>
<bq>
[eval exp="<b>f.variable1 = 'string'</b>"]<r/>
</bq>
After =, specify the string enclosed in '' (pay attention to single and double quotes).<r/>
There's no need to declare variables as string variables or number variables. The type is determined by the assigned value.<r/>
<r/>
To copy contents from another variable:<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag2</b>"]<r/>
</bq>
<r/>
This is how it's done.<r/>
</para>

<para>
<ptitle>Variable Calculations</ptitle>
<r/>
To perform calculations:<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag1 + 1</b>"]<r/>
</bq>
In this example, 1 is added to f.flag1 and stored back in f.flag1 (incrementing f.flag1 by 1).<r/>
The exp attribute accepts TJS2 "<kw>expressions</kw>".<r/>
You can use <kw>operators</kw> like <kw>*</kw>(multiplication) <kw>/</kw>(division) <kw>+</kw>(addition) <kw>-</kw>(subtraction) (with operator precedence like in mathematics). Parentheses (  ) can also be used.<r/>
For example:<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag1 + f.flag2 * f.flag3</b>"]<r/>
</bq>
This multiplies f.flag2 and f.flag3, adds the result to f.flag1, and stores it back in f.flag1.<r/>
<r/>
For division, use / (slash).<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag2 / f.flag3</b>"]<r/>
</bq>
In this case, f.flag2 is divided by f.flag3 and stored in f.flag1.<r/>
However, if you want integer division without decimals, f.flag1 would become a decimal number. For integer division results, use the integer division operator \ like this:<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag2 \ f.flag3</b>"]<r/>
</bq>
<r/>
<r/>
Also, the + operator is used to concatenate strings:<r/>
<r/>
<bq>
[eval exp="f.flag2 = 'hoge'"]<r/>
[eval exp="f.flag3 = 'une'"]<r/>
[eval exp="<b>f.flag1= f.flag2 + f.flag3</b>"]<r/>
</bq>
In the above example, f.flag1 will contain the string 'hogeune'.<r/>
<r/>
<note>
TJS2's syntax was created with reference to JavaScript (ECMAScript), so they're quite similar (though not identical).<r/>
Normal arithmetic operations behave similarly. String concatenation and number addition also work similarly.<r/>
</note>
</para>

<para>
<ptitle>Strings and Numbers</ptitle>
KAG variables don't need to be declared as string variables or number variables, nor do they need to change names.<r/>
If you assign a string, that variable becomes a string variable; if you assign a number, it becomes a number variable.<r/>
This becomes important when you use them. The + operator has different meanings and uses(^^;<r/>
<r/>
While the + operator is used for both string concatenation and number addition, when adding strings and numbers together, one of them must be converted to match the other's type for concatenation to work.<r/>
<r/>
For example, if f.flag2 contains the string 'hoge' and f.flag3 contains the number 10:<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag2 + f.flag3</b>"]<r/>
</bq>
f.flag1 will contain the string 'hoge10'.
<r/>
<r/>
Sometimes you might want to convert a string to a number. For instance, when processing numeric input from an [input] tag, you can use the unary + operator. The + operator is used before the variable you want to convert to a number. For example, if f.flag1 contains the string '20':<r/>
<r/>
<bq>
[eval exp="<b>f.flag1 = +f.flag1</b>"]<r/>
</bq>
<r/>
This converts f.flag1's content to a number and stores it back in f.flag1. f.flag1 becomes the number 20.<r/>
<r/>
<note>
Be careful when using the + operator. For operations like converting f.flag3 to a number and adding it to f.flag2, writing <tt>f.flag2++f.flag3</tt> will cause an error (because ++ is a different operator). Please write it with spaces like <tt>f.flag2+ +f.flag3</tt>.<r/>
</note>
<note>
The unary + operator (like in <tt>f.flag1 = +f.flag1</tt>) might give unexpected results with strings containing decimal points (like 0.3). To get integers only (truncating decimal places), you can use int +. For example: <tt>f.flag1 = int +f.flag1</tt>.<r/>
</note>
</para>

<para>
<ptitle>Deleting Variables and Other Features</ptitle>
To delete a variable, use <kw>delete</kw>. <b>delete variablename</b> will delete that variable.<r/>
For example, to delete <tt>f.flag1</tt>:<r/>
<bq>
[eval exp="<b>delete f.flag1</b>"]<r/>
</bq>
<r/>
<r/>
Also, the <kw>clearvar</kw> tag deletes all game variables.<r/>
<r/>
Additionally, all operators available in TJS2 and the math object's trigonometric functions (though you might not need them) can be used. For details, please refer to the TyranoScript SDK's TJS2 help.<r/>
<r/>
You can write multiple statements in one eval tag using <kw>,</kw> (comma).<r/>
For example:<r/>
<bq>
[eval exp="f.first=true"]<r/>
[eval exp="f.flag0=0"]<r/>
[eval exp="f.flag1=0"]<r/>
</bq>
Can be written more concisely as:<r/>
<bq>
[eval exp="f.first=true<b>,</b> f.flag0=0<b>,</b> f.flag1=0"]<r/>
</bq>

Also, using the <kw>iscript</kw> tag, you can write multiple eval statements more concisely.<r/>
<r/>
For example, the above can be written as:<r/>
<r/>
<bq>
[iscript]<r/>
f.first=true<b>;</b><r/>
f.flag0=0<b>;</b><r/>
f.flag1=0<b>;</b><r/>
[endscript]<r/>
</bq>
<r/>
Don't forget the ; (semicolon) after each statement.<r/>
Using commas or iscript like this makes things much more efficient than writing them separately.<r/>
</para>

<para>
<ptitle>Displaying Variable Contents</ptitle>
To display variable contents in the scenario, use the <kw>emb</kw> tag.<r/>
For example:<r/>
<bq>
[wait time=200]<r/>
*start<r/>
[cm]<r/>
[eval exp="f.number=200"][eval exp="f.text='string'"]<r/>
f.number contents: [emb exp="f.number"][l][r]<r/>
f.text contents: [emb exp="f.text"][l][r]<r/>
</bq>
<r/>
When run, it will display:<r/>
<r/>
f.number contents: 200<r/>
f.text contents: string<r/>
<r/>
This is how it's displayed.<r/>
</para>

<para>
<ptitle>Entities</ptitle>
Entities are a feature that replaces tag parameter values with variable contents.<r/>
Add <kw>&amp;</kw> before the variable name in the parameter value.<r/>
<bq>
[wait time=200]<r/>
*start<r/>
[cm]<r/>
[eval exp="f.fontsize=60"]<r/>
[font size="&amp;f.fontsize"]Size 60 text[resetfont]<r/>
</bq>
<r/>
In this case, the value 60 assigned to f.fontsize replaces the font tag's size parameter value.<r/>
<r/>
Actually, entities work by executing the text after &amp; as TJS2 code and replacing the parameter value with the result. Therefore, you can write any TJS2 expression after &amp;.<r/>
</para>

<para>
<ptitle>Conditional Checks</ptitle>
To check if a variable equals a value, you can use these operators:<r/>
<bq>
a<kw>==</kw>b    true when a equals b<r/>
a<kw>!=</kw>b    true when a does not equal b<r/>
a<kw>&lt;</kw>b     true when a is less than b<r/>
a<kw>&gt;</kw>b     true when a is greater than b<r/>
</bq>
<r/>
You can also use >= and &lt;= (greater than or equal to, less than or equal to).<r/>
These conditional checks are typically used with the if tag.<r/>
<r/>
The <kw>if</kw> tag only executes the text and tags between it and the endif tag when the exp expression evaluates to true.<r/>
<r/>
<bq>
[if exp="f.flag1<b>==</b>2"]f.flag1 is 2[endif]<r/>
[if exp="f.flag1<b>!=</b>2"]f.flag1 is not 2[endif]<r/>
</bq>
<r/>
Variables become a very powerful feature when used properly.<r/>
</para>

</doc>