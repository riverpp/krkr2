<?xml version="1.0" encoding="iso-8859-1" ?>
<doc>

<title>Distribution</title>

<para>
<ptitle>Running Project Folders</ptitle>
    When Kirikiri starts, it shows a screen to select a project folder. Here are methods to make a project folder run automatically when starting Kirikiri:<r/>
<r/>
<dl>
<dt>Name Project Folder "data"</dt>
<dd>
    If you name the project folder "<kw>data</kw>" and place it in the same folder as the Kirikiri executable (krkr.eXe), that project folder will automatically run when Kirikiri starts.
</dd>
<dt>Create data.xp3 file with Releaser</dt>
<dd>
    If you create an xp3 archive file named <kw>data.xp3</kw> using Releaser and place it in the same folder as the Kirikiri executable, that archive will automatically run when Kirikiri starts.
</dd>
<dt>Create Executable with Releaser</dt>
<dd>
    You can directly create an executable using Releaser.<r/>
    However, this can be inconvenient when distributing later patches, and there may be compatibility issues with some antivirus software, so unless there's a compelling reason to create a single executable, the above data.xp3 method is recommended.
</dd>
</dl>
<r/>
    For instructions on using Releaser, please refer to the Kirikiri SDK help.<r/>
</para>

<para>
<ptitle>Distribution Files</ptitle>
    There are files and folders that must be included when distributing a game for actual play.<r/>
<r/>
<dl>
<dt>Kirikiri Executable</dt>
<dd>
    If you didn't output an executable with Releaser, you need to distribute the executable file separately. You can rename the executable file (krkr.eXe). You can also change its icon using the Kirikiri Configuration tool (krkrconf.exe).
</dd>
<dt>Files with .cf Extension</dt>
<dd>
    When you configure settings using Kirikiri Configuration (krkrconf.exe), it outputs a file with the same name as the Kirikiri executable but with a .cf extension. This contains important options like -datapath, so it needs to be distributed with the executable.<r/>
    If this file doesn't exist, you don't need to distribute it.<r/>
</dd>
<dt><kw>krmovie.dll</kw></dt>
<dd>
    This must be distributed if your game plays MPEG movies. This file must be placed in the same folder as the Kirikiri executable (including executables output by Releaser).
</dd>
<dt><kw>krflash.dll</kw></dt>
<dd>
    This must be distributed if your game plays Flash content. This file must be placed in the same folder as the Kirikiri executable (including executables output by Releaser).
</dd>
<dt>Other Plugins</dt>
<dd>
    These must be placed in the plugin folder in the same folder as the Kirikiri executable, or in the Kirikiri executable's folder.<r/>
    While it's possible to place plugins in the project folder, this is <b>not recommended</b>. It's better to distribute them in the plugin folder in the same folder as the Kirikiri executable (placing plugins in the project folder can cause errors when running directly from CD-ROM with the plugins included in the archive).
</dd>
<dt><kw>Save Data Folder</kw></dt>
<dd>
    If save data is created in the same folder as the Kirikiri executable, you must distribute the folder where save data will be stored. However, when compressing with lzh etc., this folder might not expand properly, so when distributing in such archive formats, it's good to include a dummy file in the save data folder.
</dd>
</dl>
<r/>
For more information, please refer to the "Files/Folders" section in the Kirikiri SDK help.<r/>
</para>

<para>
<ptitle>Distributing End-User Configuration Tool</ptitle>
    To allow end users to easily configure Kirikiri settings, you can distribute the end-user configuration tool <kw>Engine Settings.exe</kw> either with your game or separately.<r/>
    For usage instructions, please refer to the Kirikiri SDK help.<r/>
<r/>
    If there are no distribution restrictions, it's recommended to distribute this tool along with your game.<r/>
</para>

<para>
<ptitle>Distributing File Destruction Check Tool</ptitle>
    You can distribute the "File Destruction Check Tool" (FileDestructionCheckTool.exe), which is used to detect destroyed files during installation or uninstallation, either with your game or separately.<r/>
    For usage instructions, please refer to the Kirikiri SDK help.<r/>
<r/>
</para>

<para>
<ptitle>Patch Distribution</ptitle>
    After distributing a game, if fixes are needed, you can distribute only the fixed files as a "patch (update)".<r/>
<r/>
<dl>
<dt>Patching Kirikiri Runtime Core</dt>
<dd>
    For when the Kirikiri runtime core needs fixes.<r/>
    If you output an xp3 format archive rather than an executable with Releaser, you just need to overwrite the old executable with the new Kirikiri executable.<r/>
    If you output an executable with Releaser, it's more complex. You'll need to:<r/>
<ol>
<li>Rename the existing executable to data.xp3</li>
<li>Copy the new executable (which may have a different name) to the same folder</li>
<li>Make it so the new executable runs</li>
</ol>
</dd>
<dt>Project Folder Patches</dt>
<dd>
    KAG has a feature where if a file named patch.xp3 exists in the same folder as the Kirikiri executable, its contents are processed with priority.<r/>
    To create this patch.xp3, gather only the fixed files and added files in a folder, then use Releaser to specify that folder and create the patch.xp3 file.<r/>
    Also, if files like patch2.xp3, patch3.xp3, patch4.xp3... exist, these will be read as well. If these files contain the same files as those being distributed (non-patch files), the files in the later patch files take precedence. Please note that when patch2.xp3, patch3.xp3, patch4.xp3... exist in sequence, it will search through the patch archives in that order.
</dd>
</dl>
</para>

<para>
<ptitle>Troubleshooting</ptitle>
    When distributing the end-user configuration tool, users can perform some level of troubleshooting themselves.<r/>
    Also, if you set Kirikiri Configuration to output console logs, this can provide useful information when problems occur. Console logs are stored as krkr.console.log in the temporary save directory.<r/>
</para>

<para>
<ptitle>Copyright</ptitle>
    Please make sure to read <kw>license.txt</kw> included with the SDK.<r/>
</para>

</doc>