<?xml version="1.0" encoding="ISO-8859-1" ?>
<doc>

<title>About Save Data</title>

<para>
<ptitle>Save Data Location</ptitle>
The save location for KAG is set in "Extension Settings" (krkrconf.exe). Among the options configurable in the extension settings, the -datapath option determines the save location. For possible values, please refer to "Command Line Options" in the Kirikiri2 SDK help.<r/>
</para>

<para>
<ptitle>Free Save Mode</ptitle>
KAG has two methods for managing saves:<r/>
<r/>
<ul>
<li>Mode where saves can only be stored in predetermined locations</li>
<li>Mode where saves can be stored in any location (Free Save Mode)</li>
</ul>
<r/>
This is set in Config.tjs with <tt>freeSaveDataMode</tt>.<r/>
<r/>
In "predetermined locations only" mode, the menu bar's "Load Game" and "Save Game" display submenu items showing available save locations, and users can save or load by selecting these locations.<r/>
<r/>
In contrast, "Free Save Mode", available since KAG3 3.09 beta 5, opens a file selection dialog box when selecting "Load Game" or "Save Game", allowing saves to be stored with any name in any location.<r/>
<r/>
In "predetermined locations only" mode, the maximum number of saves can be controlled by the implementation side.<r/>
<r/>
In "Free Save Mode", there is no limit on the maximum number of saves. Since each save is managed as an individual file, you can organize them into folders and add comments to individual files. While you can move between folders in Explorer, if files have "read-only" attributes, you cannot overwrite important data.<r/>
The default filename in "Free Save Mode" is the "title" of the saveable label.<r/>
<r/>
One thing to note in "Free Save Mode" is that in detailed works where system variables and normal variables are closely related, data inconsistencies may occur when loading old save data after reinstalling and clearing system variables (depends on the work's implementation).<r/>
Even in Free Save Mode, files saving system variables and system state are stored in the location specified by the above "Save Data Location".<r/>
<r/>
Also, it's recommended to set saveDataID in Config.tjs to prevent reading data from other Kirikiri2/KAG works (though leaving it at default is usually fine).<r/>
saveDataID specifies an ID embedded in save data, and must be different for each work to avoid conflicts with other works (even different versions of the same work). The ID embedded here is used only to distinguish save data, so it doesn't need to be meaningful. Random keyboard typing or random numbers work fine, but you can also get IDs from <at target="_top" href="http://kikyou.info/uuidgen/uuidgen.php">http://kikyou.info/uuidgen/uuidgen.php</at> (IDs obtained here are guaranteed to never conflict).<r/>
</para>

<para>
<ptitle>Saving Thumbnail Images</ptitle>
By setting <tt>saveThumbnail</tt> to true in Config.tjs, save data files will use the .BMP extension and output files valid as both images and save data. In this case, the image will be a compressed snapshot (thumbnail) of the screen at the time of saving. Since it's not a snapshot from the saveable label position, when reopening the save, it starts from the previous saveable label rather than that exact screen position (meaning the thumbnail image and restart position might be slightly different).<r/>
This makes save data easier to manage in Free Save Mode using Explorer's image management software's "compressed view", "thumbnails", etc. Also, in Free Save Mode's file selection dialog, selecting "thumbnail view" allows selecting saves by thumbnail.<r/>
<r/>
While save data with thumbnails are BMP files that can be opened with other applications, note that if opened and saved with other applications, they usually won't be readable as KAG save data anymore.<r/>
<r/>
Special care is needed when saving in right-click subroutines (refer to locksnapshot and unlocksnapshot tags).<r/>
</para>

<para>
<ptitle>Updates and Save Data Compatibility</ptitle>
Since KAG's save/load is always done by label unit, save data compatibility can be maintained even with minor scenario file changes.<r/>
While there are various incompatibility cases, typical ones include:<r/>
<r/>
<ul>
<li>When saveable labels in scenario files are changed or removed (cannot start from that label)</li>
<li>When subroutine return structure is changed (cannot return to original subroutine call position)</li>
</ul>
<r/>
Please keep these in mind when distributing patches or updates.<r/>
</para>

</doc>