<?xml version="1.0" encoding="ISO-8859-1" ?>
<doc>

<title>Let's Display Text</title>

<para>
<ptitle>Which Style to Use</ptitle>
Text-based adventure games in this era can be divided into two types: those that display messages in a message box while showing text, and those that display text across the entire screen (Visual Novel type). Since the main difference is just the display location, KAG is designed to handle both styles.<r/>
<descimg>
<dititle>Horizontal Text</dititle>
<img src="UsingVN.jpg"/><img src="UsingFrame.jpg"/>
</descimg>
Vertical writing is also possible.<r/>
<descimg>
<dititle>Vertical Display</dititle>
<img src="Vertical.jpg"/>
</descimg>
By default, it's set to display in the more common Visual Novel type with horizontal text. For details, please refer to Config.tjs. In this tutorial, we'll proceed with this default Visual Novel type display.<r/>
</para>

<para>
<ptitle>Let's Try Displaying Something</ptitle>
Now, let's try displaying some text. In the scenario folder, you should find a file called <kw>first.ks</kw>. This is the scenario file that's read first by default.<r/>
In the standard state, it contains the following content:<r/>
<bq>
[wait time=200]<r/>
*start|Start<r/>
[cm]<r/>
Hello.<r/>
</bq>
There might be other lines above and below, but please focus on the line that says "Hello." Try replacing this "Hello" with something else in your editor. For example, you could write "Good evening."<r/>
After that, launch the program, when the [Folder/Archive Selection] dialog box opens, specify your work project folder and click the [OK] button. <b>Specify the project folder, not first.ks.</b><r/>
<r/>
<descimg>
<dititle>"Good evening."</dititle>
<img src="kon-banwa.png"/>
</descimg>
Then, "Good evening" should be displayed on a black screen. We'll discuss setting backgrounds later in <comlink href="DispBase"/>.<r/>
Anyway, by replacing what comes after "Hello," you can display whatever text you want like this.<r/>
</para>

<para>
<ptitle>Let's Try Using Click Wait and Line Breaks</ptitle>
Next, let's try adding click waits between lines. To create a click wait, write [<kw>l</kw>] where you want the click wait to occur. (Use half-width; l is lowercase L)<r/>
Then, to create a line break, write [<kw>r</kw>] afterward.<r/>
<r/>
<bq>
[wait time=200]<r/>
*start|Start<r/>
[cm]<r/>
Hello.[l][r]<r/>
How are you?[l][r]<r/>
</bq>
Close the editor after saving, launch again, and try running your project folder.<r/>
<r/>
<descimg>
<dititle>Click Wait</dititle>
<img src="gokigen.png"/>
</descimg>
<r/>
There should be a click wait after "Hello," and when clicked, it should advance to the next line displaying "How are you?"<r/>
</para>

<para>
<ptitle>Let's Try Using Page Breaks</ptitle>
When you want to clear everything and start displaying from the top again, write [<kw>cm</kw>] on a new line. (use half-width)<r/>
If you don't put a click wait before this, the screen will clear too quickly. Before [cm], write [<kw>p</kw>] for a page break. See the example below:<r/>
<bq>
[wait time=200]<r/>
*start|Start<r/>
[cm]<r/>
Hello.[l][r]<r/>
How are you?[l][r]<r/>
End of page.[p]<r/>
[cm]<r/>
New page started.<r/>
</bq>
Now, try running this. At the [p] position, a page break indicator will appear with a click wait, and when clicked, all text will clear and "New page started." will be displayed from the top.<r/>
<r/>
<note>
There are three tags that clear messages: er, ct, and cm. Each has different effects which will be explained in <comlink href="SaveLoad"/> regarding save and load functionality. If you're not concerned about specifics, using cm for everything should be fine.<r/>
</note>
<r/>
<note>
In tutorials before KAG 3, we used ct. cm and ct are similar, both clearing all messages. ct doesn't reset the message layer display target to message0 like ct does. Using ct might be better.<r/>
However, please note that for save-enabled labels, you must include either cm or ct tags.
</note>
<r/>
In KAG, text is all drawn in what's called the "<kw>message layer</kw>". KAG has multiple message layers by default, making it possible to show dialogue scenes with multiple characters. Please refer to the <kw>current</kw> tag for more details.<r/>
</para>

<para>
<ptitle>What Are Tags?</ptitle>
So, what are these half-width characters enclosed in [ ] that we've been using?<r/>
Things enclosed in [ ] are called <b>tags</b>, and they're used to control various aspects of KAG.<r/>
For example, in the first line, we had <tt>[wait time=200]</tt>, where <tt>wait</tt> is the <b><kw>tag name</kw></b>, with <tt>time=200</tt> as a <b><kw>parameter</kw></b>. Here, <tt>time</tt> is the <b>parameter name</b>, and <tt>200</tt> is the <b>parameter value</b>.<r/>
Following this format, write the "tag name" after [, then "parameter=value" after a space if needed. Parameters can be multiple. End with ] to close the tag.<r/>
We'll encounter many more tags, but it's best to remember them gradually as we use them.<r/>
Tags are very important. All instructions to KAG besides text display are done through these tags. There are many different tags, please refer to <link href="Tags"/>.<r/>
<r/>
Using <kw>macros</kw><comlink href="Macro"/>, you can combine multiple tags to create new tags. This is useful as it allows you to combine several tags into one. It's helpful to define sets of tags as macros in advance according to your game system.<r/>
<r/>
<note>
In versions before KAG 3, lines would break automatically with \ (backslash) at line ends. From KAG 3 onward, lines won't break without [r]. If you want the same line break behavior as before KAG 3, set global.ignoreCR to false in Config.tjs.<r/>
</note>
<r/>
</para>

<para>
<ptitle>Command Lines</ptitle>
Lines beginning with @ (half-width) are recognized as "command lines".<r/>
After @, write either tags enclosed in [ ], or tag names and their parameters directly. Only one command can be written per line.<r/>
Though the format is different, it functions the same as tags.<r/>
<r/>
For example, these two lines mean the same thing:<r/>
<r/>
<bq>
[wc time=20]<r/>
@wc time=20<r/>
</bq>
<r/>
Also, the example from "Let's Try Using Page Breaks" could be written like this:<r/>
<r/>
<bq>
@wait time=200<r/>
*start|Start<r/>
@cm<r/>
Hello.[l][r]<r/>
How are you?[l][r]<r/>
End of page.[p]<r/>
@cm<r/>
New page started.<r/>
</bq>
</para>

<para>
<ptitle>Special Characters and Line Breaks in Scenarios</ptitle>
While scenarios are regular text files where you can write freely, the following characters have special meanings and need attention when used:<r/>
<r/>
<dl>
<dt>  <kw>[</kw>  (half-width square bracket)</dt>
<dd>
    This marks the start of a tag (^^;;<r/>
    If you want to use a half-width square bracket not as a tag start, write <tt><b>[[</b></tt> (writing two brackets is OK - brackets themselves can be written separately).
</dd>

<dt>  <kw>;</kw>  (half-width semicolon)</dt>
<dd>
    Lines beginning with this semicolon <b>at the start of a line</b> are ignored. You can use this to write comments.
</dd>

<dt>  <kw>*</kw>  (half-width asterisk)</dt>
<dd>
    <b>Only when written at the start of a line</b>, defines a label. These become targets for jumps and also serve as bookmarks for save/load (discussed elsewhere).
</dd>
<dt>  <kw>@</kw>  (half-width at mark)</dt>
<dd>
    <b>Only when written at the start of a line</b>, indicates a command line.
</dd>
<dt>  <kw>tab</kw></dt>
<dd>
    Tabs in lines are processed like spaces (ignored). You can use this to indent scenario files (making scenarios easier to read). Note that only tabs are processed this way; spaces are not ignored, so be careful.
</dd>
</dl>
</para>

</doc>