<?xml version="1.0" encoding="ISO-8859-1" ?>
<doc>
<title>Getting Started</title>

<para>
<ptitle>Getting Started</ptitle>
First, create a project folder under the Kirikiri SDK folder (where <tt>krkr.exe</tt> is located). The project name can be anything. However, avoid using "<tt>data</tt>" (the data folder is used when distributing based on necessity). This folder is called the <kw>project folder</kw>.<r/>
<r/>
Next, copy the KAG system files into this folder. You can find these in the <tt>template</tt> folder when you extract the downloaded KAG LZH file. Copy the <b>contents</b> (not the <tt>template</tt> folder itself) to your project folder.<r/>
<r/>
The layout should be as follows:<r/>
<descimg>
<dititle>File Copy Location</dititle>
<img src="Folders.png"/>
</descimg>
In the <tt>system</tt> folder, you'll find a file called <tt>Config.~new</tt>. Rename this to <tt><kw>Config.tjs</kw></tt>. Then, open <tt>Config.tjs</tt> in a text editor.<r/>
<r/>
<r/>
<tt>Config.tjs</tt> contains various settings that you'll likely modify later. Please refer to the comments within <tt>Config.tjs</tt> for details.<r/>
<r/>
<r/>
Note: If you find files named "Don't delete this file" in the copied folders, these are dummy files placed to prevent archive extraction software from skipping empty folders. You can delete them (or leave them, they won't cause any problems).<r/>
<note>
When updating KAG, basically you can just overwrite the existing <tt>system</tt> folder with the contents of the new KAG's <tt>system</tt> folder. The first execution with the new version will automatically handle migration of the old <tt>Config.tjs</tt>, so follow any specific instructions provided.<r/>
</note>

</para>

<para>
<ptitle>Folder Structure</ptitle>
When copied, several folders will be created together. Here's what each folder does.<r/>
While you can technically deviate from this folder structure, you might need to modify <tt><kw>Initialise.tjs</kw></tt> if you change the layout. Please check the contents of <tt>Initialise.tjs</tt> for details (it's a text file, so you can open it in a text editor).<r/>
Note that when specifying files in KAG, you don't need to include folder paths. You can even put MIDI files in the <tt>bgimage</tt> folder if you want. However, it's conventional to organize files in their respective folders <tt>(^^)</tt><r/>
<r/>
These folders don't need to stay empty. You can delete folders you don't need.<r/>
<r/>
<dl>
<dt><img src="folder.png"/> <kw>system folder</kw></dt>
<dd>
The <tt>system</tt> folder contains system files necessary for KAG operation.
</dd>

<dt><img src="folder.png"/> <kw>scenario folder</kw></dt>
<dd>
The <tt>scenario</tt> folder contains scenario files. Scenario files are .ks files that contain text to display on screen and tags that specify which images to show, etc.<r/>
Note that when launching Kirikiri, you specify the "project folder", not any specific scenario file.
</dd>

<dt><img src="folder.png"/> <kw>bgimage folder</kw></dt>
<dd>
Folder for background images to display.
</dd>

<dt><img src="folder.png"/> <kw>fgimage folder</kw></dt>
<dd>
Folder for foreground images (character poses etc.).
</dd>

<dt><img src="folder.png"/> <kw>image folder</kw></dt>
<dd>
Folder for other images (like CGs).
</dd>

<dt><img src="folder.png"/> <kw>bgm folder</kw></dt>
<dd>
Folder for BGM (Background Music) data.
</dd>

<dt><img src="folder.png"/> <kw>sound folder</kw></dt>
<dd>
Folder for sound effect data.
</dd>

<dt><img src="folder.png"/> <kw>rule folder</kw></dt>
<dd>
Folder for universal transition rule images.
</dd>

<dt><img src="folder.png"/> <kw>others folder</kw></dt>
<dd>
For miscellaneous files.
</dd>

<dt><img src="folder.png"/> <kw>video folder</kw></dt>
<dd>
Folder for video files.
</dd>
</dl>
</para>

<para>
<ptitle>Supported Image Formats</ptitle>
KAG (and Kirikiri) supports the following image formats:<r/>
See <link href="GraphicFormats"/> for more details.<r/>
<r/>
<dl>
<dt><kw>BMP Images</kw></dt>
<dd>
Files with .bmp or .dib extensions. Kirikiri only supports uncompressed BMP.<r/>
32bit (32bpp) BMP files are treated as bitmaps with alpha channels.
</dd>
<dt><kw>JPEG Images</kw></dt>
<dd>
Files with .jpeg or .jpg extensions. Can handle JPEG output from various graphics tools.
</dd>

<dt><kw>Portable Network Graphics</kw> (<kw>PNG Images</kw>)</dt>
<dd>
Files with .png extension. Can be output by various graphics tools. Supports alpha channels and indexed colors.
</dd>

<dt><kw>Entis Rasterized Image format</kw> (<kw>ERI Images</kw>)</dt>
<dd>
Files with .eri extension. This is an image compression technology/format developed by Leshade Entis. It's a "paid format".<r/>
Image converters and utilities are available from "Bishamon club" <at target="_top" href="http://www.entis.jp/eri/">http://www.entis.gr.jp/eri/</at>.<r/>
<r/>
If using this image compression format, you must <b>carefully</b> consider copyright issues. Please refer to Kirikiri SDK Help's "Usage Rights" and the aforementioned "Bishamon club" for details.
</dd>

<dt><kw>TLG5 Images</kw></dt>
<dd>
Files with .tlg extension (not .tlg5). Kirikiri's own image compression format, featuring fast decompression. Supports full-color images and full-color images with alpha channels.
</dd>

<dt><kw>TLG6 Images</kw></dt>
<dd>
Files with .tlg extension (not .tlg6). Kirikiri's own image compression format, featuring high compression ratio with relatively fast decompression. Supports full-color images and full-color images with alpha channels.
</dd>

<dt>Other Image Formats</dt>
<dd>
Using <kw>Susie Plug-in</kw>, you can support other image formats. Place Susie Plug-ins in the <tt>plugin</tt> folder under either the Kirikiri executable krkr.exe folder or your project folder. (See the "About Plugins" section below)
</dd>
</dl>
</para>

<para>
<ptitle>Supported Audio Formats</ptitle>
<r/>
KAG (and Kirikiri) supports the following audio formats:<r/>
For sound effects, only PCM is usable.<r/>
For BGM, which format to use requires changes to KAG's Config.tjs. Please refer to Config.tjs contents for details.<r/>
<r/>
<dl>
<dt><kw>PCM</kw></dt>
<dd>
By default, can play uncompressed RIFF-WAVE (.wav) files.<r/>
<r/>
Besides uncompressed RIFF-WAVE, can also play Ogg Vorbis (*.ogg), TCWF (*.tcw), Microsoft ADPCM (*.wav), etc., but plugins are required.<r/>
Plugins are included in the Kirikiri 2 distribution files: for Ogg Vorbis (wuvorbis.dll), TCWF (wutcwf.dll), and Microsoft ADPCM (wumsadp.dll).<r/>
<r/>
Ogg Vorbis is a free/open compression audio format that can achieve quality similar to MP3. Encoders available at <at target="_top" href="http://www.vorbis.com/">http://www.vorbis.com/</at>.<r/>
<r/>
Other plugins (paid or free) can be used to support additional formats. For plugins, refer to each plugin's documentation and the "About Plugins" section below.<r/>
<r/>
For uncompressed Wave, Ogg Vorbis, TCWF, and Microsoft ADPCM formats, you can use Loop Tuner (available on support page) to create loop information, allowing precise loop point specification. This enables seamless looping without gaps.
</dd>

<dt><kw>MIDI Sequence Data</kw></dt>
<dd>
Can play Standard MIDI Format (.smf or .mid) files. Special care needed when performing crossfades; see Kirikiri SDK Help's "About MIDI Sound Buffer" for details.
</dd>

<dt><kw>CD-DA</kw></dt>
<dd>
Can play CD-DA from <kw>CD-XA</kw>. CD-XA is a CD format containing both computer data as CD-ROM and audio data as CD-DA. Kirikiri first searches for the computer data volume on available CD-ROM drives, so it can only work with CD-XA format CDs. (Though theoretically possible to specify drives explicitly in this tutorial...)
</dd>
</dl>
</para>

<para>
<ptitle>Supported Movie Formats</ptitle>
<dl>
<dt><kw>MPEG I</kw></dt>
<dd>
Supports common MPEG I format.<r/>
However, for distribution, <kw>krmovie.dll</kw> must be placed in the same location as the Kirikiri executable. Also, DirectX 8 is required for movie playback.<r/>
<note>
For video-only MPEG I streams without audio and multiplexing, use .mpv extension instead of .mpeg/.mpg. Kirikiri determines video format by extension.<r/>
</note>
</dd>
<dt><kw>WMV</kw></dt>
<dd>
Supports WMV format.<r/>
Playable WMV versions depend on the Media Player and DirectX installed on the system, but DirectX 9 or later is recommended.
</dd>
</dl>
<note>
Videos can be played directly from archives created with Releaser (without temporary files). However, movie files must be classified as "uncompressed" in Releaser (default classification automatically sets to uncompressed).<r/>
</note>
<note>
AVI format movies are not supported.
</note>
</para>

<para>
<ptitle>Flash</ptitle>
<dl>
<dt><kw>SWF</kw></dt>
<dd>
Supports Macromedia Flash playback.<r/>
However, <kw>krflash.dll</kw> must be placed in the same location as the Kirikiri executable for distribution. Also, Flash Player must be installed to play SWF files.<r/>
Flash playback method is the same as video.
</dd>
</dl>
<note>
Flash support is not complete. Flash content requiring keyboard input may not work properly. Also, when storing SWF files in archives like XP3, since they're written to temporary files for use, it's recommended not to archive large SWF files (3-5MB or larger).<r/>
</note>
<note>
While the author hasn't created Flash content, Flash content can jump to any label in KAG scenarios. Use Action Get URL with <tt><b>FSCommand:Go</b></tt> as URL and "scenario file/label" format as target window (e.g., <tt><b>first.ks/label2</b></tt>)<r/>
<tt><b>FSCommand:Eval</b></tt> with TJS code as target window allows executing arbitrary TJS code when the action occurs (like setting variables).<r/>
In openvideo tag or playvideo tag, you can specify Flash parameters by adding ? after the filename in storage (e.g., <tt>hoge.swf?name=value&amp;param=content</tt>).<r/>
</note>
</para>

<para>
<ptitle>Supported Archive Formats</ptitle>
<dl>
<dt><kw>XP3</kw> and <kw>PEXP3</kw></dt>
<dd>
Can handle Kirikiri's own XP3 archive format.<r/>
PEXP3 is a format that embeds XP3 archives into "Kirikiri executable files", allowing products to be contained in a single executable file.<r/>
Both formats can be created using Releaser included with Kirikiri SDK.
</dd>
<dt>Other Archive Formats</dt>
<dd>
Using <kw>Susie Plug-in</kw>, other archive formats can be supported. (See "About Plugins" section below)
</dd>
</dl>
</para>

<para>
<ptitle>Pre-rendered Fonts</ptitle>
Pre-rendered fonts are font data created by developers. Using these allows display with exactly the developer's intended fonts, unaffected by OS differences. They can also be used freely without external dependencies.<r/>
Pre-rendered fonts are created with <kw>krkrfont.exe</kw>. When creating, please use fixed-width fonts for vertical text use.<r/>
<r/>
Pre-rendered font files have .tft extension. Place them in folders like others and assign them to desired fonts using the mappfont tag.<r/>
<r/>
<note>
For pre-rendered font creation tool usage, please refer to the Kirikiri SDK help.<r/>
</note>
</para>

<para>
<ptitle>About Plugins</ptitle>
Susie-Plugin, plugins for playing additional PCM formats, or other plugins must be specified with the <kw>loadplugin</kw> tag before use.<r/>
<r/>
For example, to use wuvorbis.dll:<r/>
<r/>
<bq>
@loadplugin module=wuvorbis.dll<r/>
</bq>
<r/>
Plugins must be placed in one of these locations:
<ul>
<li>Same location as Kirikiri executable (krkr.exe)</li>
<li><kw>plugin folder</kw> under the executable's folder</li>
<li>Project folder</li>
</ul>
When placed in the project folder, they can be archived with Releaser or included in the executable, but this is <b>not recommended</b>. It's better to distribute them alongside the main executable rather than including them in archives (errors may occur when running directly from CD-ROM if archived).<r/>
<r/>
krmovie.dll and krflash.dll are not plugins, so they don't need to be specified with loadplugin tag.<r/>
<r/>
Please refer to Kirikiri SDK help's "About Plugins" for more details.<r/>
<note>
While plugins work by just placing them in the same location as the executable in Kirikiri 1, Kirikiri 2 requires explicit plugin specification.<r/>
</note>
</para>

<para>
<ptitle>UNICODE Support</ptitle>
You'll need a text editor to edit scenario files and TJS scripts.<r/>
While regular text editors with Japanese support are generally sufficient, since Kirikiri outputs console log files and KAG save data in UNICODE, you'll need a UNICODE-compatible text editor when editing UNICODE text.<r/>
Also, when writing non-Japanese characters (meaning characters not normally used in Japanese Windows) in scenario files or TJS scripts, they must be written in UNICODE text.<r/>
<r/>
To display non-Japanese characters, several conditions must be met:<r/>
<r/>
<ul>
<li>Relevant scenario files and TJS script files must be written in UNICODE (note that there are text files that look like but aren't actually UNICODE text files)</li>
<li>If not using pre-rendered font files, the player's OS must be Windows NT-based (Windows 2000, XP, Vista or later) (OS doesn't matter if using pre-rendered font files)</li>
<li>Specify fonts that contain the characters you want to display</li>
<li>The language you want to display must be written left-to-right (horizontal) or top-to-bottom (vertical)</li>
</ul>
<r/>
In any case, non-Japanese characters can only be displayed in the game screen area. Standard Windows user interface elements like window title bars and menu items can only display Japanese characters. Also, characters that can be input into edit tags are limited to Japanese characters.<r/>
<r/>
<note>
While we mentioned "Japanese characters" above, basically Kirikiri follows the locale of the OS it's running on (Japanese characters for Japanese Windows, Chinese for Chinese Windows). The author hasn't tested other cases.<r/>
</note>
<note>
Since current Kirikiri/KAG only works on Windows, "UNICODE" here means UTF-16 little-endian (though surrogate pairs aren't supported).<r/>
Also, Kirikiri can properly identify character encoding only when UNICODE text has UTF-16 encoding with BOM (Byte Order Mark) at the start (though on Windows, it can read big-endian UTF-16 even without BOM).<r/>
</note>
</para>

</doc>